
1. MyBatis Spring 설정 :build.gradle
  implementation group: 'org.springframework', name: 'spring-jdbc', version: '5.3.27'
  implementation group: 'org.springframework', name: 'spring-tx', version: '5.3.27'

  //mybatis 라이브러리
  implementation 'org.mybatis:mybatis:3.5.9'
  implementation 'org.mybatis:mybatis-spring:2.0.7'


  2. MyBatis를 위한 스프링 설정  - SqlSessionFactory
     1. MyBatis를 이용하기 위해서는 스프링에 설정해둔 HikariDataSoruce 를 이용해서 SqlSessionFactory (Bean)을 설정한다.

     2.  root-context.xml -mybatis-spring 빈을 등록

  3. MyBatis  SQL ==> 파일로 (XML) , 인터페이스 와 어노테이션 으로도 처리가능하다.

    - Mapper 인터페이스 활용하여 Mybatis 를 활용하여 DB연동 테스트

    - 작성된 인터페이스를 mapper패키지에 구현한다.
    - 구현된 매퍼 인터페이스를 root-context.xml 에 등록해 주어야만 스프링컨테이너가 처리해 준다.
    - root-context.xml 에  <mybatis:scan base-package="매퍼인터페이스의 패키지 경로"></mybatis:scan>

    결론 :
    MyBatis 와 스프링을 연동하고 매퍼 인터페이스를 활용하는 방식은
    개발자가 실제 동작하는 클래스와 객체를 생성하지 않고
    스프링에서 자동으로 생성되는 방식임을 알게 되었다.

    스프링에서 자동으로 생성된 객체를 이용하기 때문에 개발자가 직접 코드를 수행할 수 없다는 단점이 있다.
    하지만 인터페이스만으로도 개발을 완료할 수 있다는 장점이 크기 때문에 현업에서의 활용도가 높다.


    현업에선 SQL을 별도의 파일로 분리하여 작업하는 것을 권장한다. ==> XML
    XML 을 이용하는 이유
    SQL이 길어지면 이를 어노테이션으로 처리하기가 복잡하기 때문이다.

    - XML 과 매퍼 인터페이스를 결합하여 구성
      1. 매퍼인터페이스 정의하고 메소드 선언
      2. 해당 XML파일을 작성 ( XML파일 이름이 매퍼인터페이의 이름과 반드시 동일해야 한다.)
      3. <select> <insert><delete> 태그에 id 속성값을 매퍼인터페이스의 메소드 이름과 같게 작성

      select 태그는 반드시 resultType이나 resultMap이라는 속성을 지정해야 한다.
      select문의 결과를 어떤 타입으로 처리할 지에 대한 설정 java.lang.String

      root-context.xml 에 있는 Mybatis 설정에 xml 파일을 인식하도록 설정한다.
      <property name="mapperLocations" value="classpath:/mappers/**/*.xml"></property>
      매퍼파일들의 위치를 의미하며 , resources 의 경우 'classpath:' 접두어를 이용하여 인식되는 경로이다.
      mappers 폴더 밑에 폴더가 있어도 관계없도록 '**'
      모든 xml을 의미하는 '*.xml' 을 기술해 준다.












